main:
	ADDI X0, XZR, #20
	BL arraybuilder
	DUMP

    	B end

swap: // take in two numbers, swap them
	SUBI SP, SP, #8		// Make space on stack
	STUR LR, [SP, #0]	// Store link register
	
	LDUR X9, [X1, #0]
	LDUR X10, [X2, #0]
	STUR X10, [X1, #0]
	STUR X9, [X2, #0]
	
	LDUR X9, [SP, #0]
	ADDI SP, SP, #8
	BR X9
	
arraybuilder: // takes in the array length as a param
	// stack manipulation
	SUBI SP, SP, #8
	STUR LR, [SP, #0]

	ADDI X9, XZR, #0
	ADDI X10, XZR, #0
	ADDI X11, XZR, #0
	
	ADD X9, X9, X0
	ADDI X10, X10, #90
	
	arrayloop:
		
		STUR X10, [X11, #0]
		
		ADDI X11, X11, #8
		
		SUBI X9, X9, #1
		SUBI X10, X10, #1
		
		CBZ X9, arrayend
		
		B arrayloop
	
	arrayend:
		LDUR X9, [SP, #0]
		ADDI SP, SP, #8
		BR X9

minindex:
        // stack manipulation
        SUBI SP, SP, #8
        STUR LR, [SP, #0]

        ADDI X10, XZR, #0
        ADDI X11, XZR, #0

        ADD X10, X10, X0
        ADD X10, X10, #8 // this is our start address + 1
        ADD X11, X11, #0 // the last known min index

        min_loop:
                SUBS X14, X10, X1
                B.GT min_end

                LDUR X12, [X10, #0]
                LDUR X13, [X11, #0]
                SUBS X14, X13, X12
                B.GT if_less_than

                B if_not_less_than

                if_less_than:
                        ADDI X11, XZR, #0
                        ADD X11, X11, X10

                if_not_less_than:
                        ADDI X10, X10, #8
                        min_loop

        min_end:
                // stack manipulation
                LDUR X9, [SP, #0]
                ADDI SP, SP, #8
                ADDI LR, XZR, #0
                ADD LR, LR, X11
                BR X9

end:
    DUMP

end:
DUMP
