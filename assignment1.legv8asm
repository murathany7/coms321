// Contributors kstrozin@iastate.edu jpowell1@iastate.edu njtucker@iastate.edu

main:
	ADDI X0, XZR, #20
	BL arraybuilder

	ADDI X0, XZR, #20
	BL selectionsort
    	B end

swap: // take in two numbers, swap them
	SUBI SP, SP, #8		// Make space on stack
	STUR LR, [SP, #0]	// Store link register

	PRNT X1
	PRNT X2
	
	LDUR X9, [X2, #0]
	LDUR X10, [X1, #0]
	STUR X10, [X2, #0]
	STUR X9, [X1, #0]
	
	LDUR X9, [SP, #0]
	ADDI SP, SP, #8
	BR X9
	
arraybuilder: // takes in the array length as a param
	// stack manipulation
	SUBI SP, SP, #8
	STUR LR, [SP, #0]

	ADDI X9, XZR, #0
	ADDI X10, XZR, #0
	ADDI X11, XZR, #0
	
	ADD X9, X9, X0
	ADDI X10, X10, #90
	
	arrayloop:
		
		STUR X10, [X11, #0]
		
		ADDI X11, X11, #8
		
		SUBI X9, X9, #1
		SUBI X10, X10, #1
		
		CBZ X9, arrayend
		
		B arrayloop
	
	arrayend:
		LDUR X9, [SP, #0]
		ADDI SP, SP, #8
		BR X9

minindex: // takes in the size of the array

	// stack manipulation
	SUBI SP, SP, #16
	STUR X19, [SP, #0]
	STUR LR, [SP, #8]

	// zero out the registers
	ADDI X9, XZR, #0
    	ADDI X11, XZR, #0

    	ADDI X10, XZR, #0 // array[i]
	ADDI X10, X1, #0 // offset
	ADDI X15, XZR, #152
	
	min_loop:
		// if we've reached beyond the array
		SUB X9, X15, X10
		CBZ X9, min_end
		
		LDUR X12, [X10, #0] // array[i]
		LDUR X13, [X11, #0] // array[minindex]

		SUBS X14, X13, X12

		B.GE if_less_than
		
		B if_not_less_than
		
		if_less_than:
			ADDI X11, X10, #0
		if_not_less_than:
			ADDI X10, X10, #8
			B min_loop

	min_end:
		// stack manipulation
		LDUR X19, [SP, #0]
		LDUR LR, [SP, #8]
		ADDI SP, SP, #16
		BR LR

selectionsort:
	ADDI X20, XZR, #0 // counter
	ADDI X21, XZR, #0 // comparison
	
	sortloop:
		SUBS X21, X0, X20
		B.LE sort_end

		LSL X1, X20, #3
		BL minindex
		ADDI X2, X11, #0

		BL swap

		ADDI X20, X20, #1
		B sortloop

	sort_end:
		BL end

end:
	DUMP
